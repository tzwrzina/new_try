#include <iostream>
#include <string>
#include <fstream>
#include<cstring>
#include<cstdlib>
#include <cmath>
# define K  100  //goneis
# define C  50   // paidia

using namespace std;

long long toString(string rec);
string put;

typedef struct trie_node{
char word[50];
char* emergency_word;
char is_final[1];
int num_child, seats;
struct trie_node* children;
}trie_node;


class Index
{
    public:
        trie_node *root;
        int N, num_child, seats;
    
        Index(int key )
        {   
            root=malloc(sizeof(trie_node));
            root->children=malloc(K*sizeof(trie_node)); 
            root->num_child=0;                    
            root->seats=K;
            strcpy(root->is_final ,"N");
            for(int i=0; i<K; i++){
                  strcpy(root->children[i].word," ");
            }
	
        };
   
        void add_child(trie_node* new_node, int num){
             new_node->children=malloc(num*sizeof(trie_node)); 
             for (int i = 0; i < num; i++)
            {  
             
              new_node->children[i].seats=C;
	      new_node->children[i].num_child=0;
	      strcpy(new_node->children[i].is_final,"N");
	      strcpy(new_node->children[i].word," ");
	 
            }
	
	}
int diplotupo(int thesi,trie_node* node,char* final){
      if(strcmp(final,"Y")==0){
	strcpy(node->children[thesi].is_final,final);
	node->num_child--;}
      else{ cout<<"perasa apo dw"<<node->children[thesi].word<<endl;node->num_child--; return thesi;
	}	



}


 int insert_root(trie_node* node, string word, int end,char* final){
                                                                                /////////////////////mpainei h prwth eggrafh kai paei sth uesh 0
   
 if( strcmp(node->children[0].word," " )== 0){    cout<<"zoumi"<<node->children[0].word<<"!"<<word<<endl;
     cout<<"mphka me word :"<<word<<endl;
     node->children[0].children=malloc(C*sizeof(trie_node)); 	  
     node->children[0].num_child=0;                              
     node->children[0].seats=0;
     strcpy(node->children[0].is_final,final); 
     strncpy ( node->children[0].word ,word.c_str(), sizeof(node->children[0].word) );
     cout<< node->children[0].word<<endl;
     return 0;	
   }


                                                                               ///////////////////////////////////////metafora upoloipwn eggrafwn an prepei na ginei


  
  for(int i=0; i<end; i++){
     if( strcmp(node->children[i].word, word.c_str() )== 0){
				 int a=diplotupo(i, node,final);				
				 return a; } 
     int keno=0;
     if (toString(node->children[i].word)>toString(word.c_str())) {cout<<"mphka edw"<<endl; 


                                                                                      //////////phgaine na vreis thn epomenh kenh 8esh sto pinaka////////////////////////////

	  for(int j=i; j<end; j++) {if (strcmp(node->children[j].word," ")==0){ keno=j; cout<<" gurisa j"<< j <<endl; j=end; }}
	  int diafora=keno-i;
          int counter=0;
	  while(counter<diafora){
          memmove(&node->children[keno-counter], &node->children[keno-counter-1], sizeof(node->children[keno-counter-1]));            
 	  cout<<"src"<<node->children[keno-counter-1].word<<"dest"<<node->children[keno-counter].word<<endl;
	  node->children[keno-counter-1].children=realloc(node->children[keno-counter-1].children,C*sizeof(trie_node)); 
          node->children[keno-counter-1].num_child=0;                    
          node->children[keno-counter-1].seats=C;
          strcpy(node->children[keno-counter-1].is_final ,"N");
          strcpy(node->children[keno-counter-1].word," ");




           cout<<"dest  " <<node->children[keno-counter].word<<"src "<<node->children[keno-counter-1].word<<endl;
           counter++;
	  }
    
      } 


  											 ////////////////////////////////////////   vale auto pou exeis ekei pou prepei
     if(strcmp(node->children[i].word," ")==0){	          
        cout<<"edw mpainoun ola??"<<endl;
	node->children[i].children=malloc(C*sizeof(trie_node)); 	  
     	node->children[i].num_child=0;                              
     	node->children[i].seats=0;
     	strncpy(node->children[i].is_final,final,sizeof(final) ); 
     	strncpy ( node->children[i].word ,word.c_str(), sizeof(word) );
     	
	return i;}	
     }
     
  }





 int Insert_child(trie_node* new_node,string word_new) {                           
        int thesi;
	string str2 (" "), first,last;
        size_t found=0;
        found = word_new.find(str2);
        first =word_new.substr (0,found).c_str();
        found = word_new.find(str2);
	cout<<"mphka na valw san paidi " <<first<<endl;
	//if(new_node->children==NULL){ cout<<MPHKA<<endl;
	//add_child(new_node,C);}
         if (found >= word_new.length()) found=0;  
              if (found==0){	                                                                   //den exei paidi to paidi
					thesi=insert_root(new_node,first,C,"Y");  
					cout<<"new node "<<new_node->children[num_child].word<<"1"<<endl;
					new_node->num_child++;
					 print();                                     
				return -1; }  
	        
               else{                   	thesi=insert_root(new_node,first,C,"N");						//exei paidi  
					last=word_new.substr(found+1).c_str();
                                        int result=Insert_child(&new_node->children[thesi],last);
			                new_node->num_child++;
                			return 0;            
		}
                
    }
  



  



   int Insert_root(trie_node* new_node,string word_new) {                           
        string str2 (" "), first,last;
        size_t found=0;
        found = word_new.find(str2);
        first =word_new.substr (0,found).c_str();
        cout<<"mphka sto root me word " <<first<< endl;
        if (found >= word_new.length()) found=0;   
/////to do:  elegxe an xreiazetai enlarge///////////////////////////////////////////////////////////
	
	
	
   
	 if (found==0) {                int thesi=insert_root(root, first, root->seats, "Y"); 
					add_child(&root->children[root->num_child],K); 
					root->num_child++; 
                                        return -1; 
					
		 	}else{  
	                                int thesi=insert_root(root, first, root->seats, "N");
                                        add_child(&root->children[thesi],C);  
					last=word_new.substr (found+1).c_str();
					cout<< "exei paidia " <<first << "last "<< last<<endl;
                                        int a=Insert_child(&root->children[thesi],last);
					cout<<"from insert_root "<< root->children[thesi].word << " "<<root->children[thesi].children[0].word<<"thesi"<<thesi<<endl;		
					root->num_child++;
                			return 0;              
		
               }   
   }



 void print_child  (trie_node *new_node,int level)

    {   for (int i=0;i<new_node->num_child;i++){
        cout  <<" ------------------------------"  <<level<<"   "<<new_node->children[i].word<< "   "<< new_node->children[i].is_final<<endl;
        
        if (new_node->children[i].num_child>0 )  {level++;print_child(&new_node->children[i],level);level--;}
          } 
          return ;
    }
		 void print(){   
	    for (int i=0;i<root->num_child;i++){
        cout <<i <<"     "<<root->children[i].word<<  "   "<< root->children[i].is_final<< endl;
    	if (root->children[i].num_child>0 ) { print_child(&root->children[i],1);
		}
	}
	return ;
}
/////////////////////////////////////////////////////////////////////////////////////anoigei to file kai diavazei  
int read_data(char *x){
  	
  string line;
   ifstream myfile (x);

  
  if (myfile.is_open())
  { int i=0;
    while ( getline (myfile,line) )  { 
	          Insert_root(root,line);
	          
	   	}  
	print();
        myfile.close();
        cout<<"num_child"<< root->num_child<<endl;  
  


return 0;
}
 else return 1;

};
///////////////////////////////////////////////////////////////////////////////////////////////////////toString
long long toString(string rec) {

  int c, sign, offset;
  long long n;
  char a[200];
  if (rec[0] == '-') {  // Handle negative integers
    sign = -1;
  }
  if (sign == -1) {  // Set starting position to convert
    offset = 1;
  }
  else {
    offset = 0;
  }
  n = 0;
 for (c = offset;  c < 9 ; c++) {
      n = n * 100 + rec[c] - '0';
  }
  if (sign == -1) {
    n = -n;
  }
  return n;
} 
////////////////////////////////////////////////////////////////////////////////////////////////////////// Afou anoixoume to work
int quiry_new(char *x, Index N_Gram){
   string line;
   string str2 (" "), first,last;
   size_t found=0;
   ifstream myfile (x);
  if (myfile.is_open())
  {
    while ( getline (myfile,line) )  {  
    found = line.find(str2);
    first =line.substr (0,found).c_str();
	if (strcmp(first.c_str(), "Q" )== 0) {  
			    if(line.length()>0)last=line.substr (found+1).c_str();
				//N_Gram.Find_word( N_Gram.root,last,0) ;	
				cout<<endl;
		}
		
	if (strcmp(first.c_str(), "A" )== 0) { 
			    last=line.substr (found+1).c_str(); 
			/*	int num=N_Gram.Insert(N_Gram.root,last);
				if (num>=0 ){ 
				trie_node *new1 = new trie_node;
        	    new1->seats=K;
        	    new1->num_child=0;
        	    strcpy(new1->is_final ,"Y");
        	    strcpy(new1->word,N_Gram.root->children[num+1]->word);
        	    N_Gram.root->children[num]=new1;
        	    strcpy(N_Gram.root->children[num]->word,last.c_str()  );
            } */
		}
	if (strcmp(first.c_str(), "D" )== 0) { 
			    last=line.substr (found+1).c_str();  
			 	//N_Gram.Delete(N_Gram.root,last);
		}
	if (strcmp(first.c_str(), "F" )== 0) {
			    myfile.close();
				return 1;	
		}
    }  
  } 
  else return 0;	
}

 };
